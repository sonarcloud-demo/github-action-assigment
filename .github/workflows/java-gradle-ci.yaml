# .github/workflows/java-gradle-ci.yaml
name: java-gradle-ci

on:
  workflow_call:
    inputs:
      java-version:
        required: true
        type: string
      gradle-version:
        required: true
        type: string
      docker-repository-name:
        required: true
        type: string
      docker-tag:
        required: true
        type: string
    secrets:
      docker-username:
        required: true
      sonar-token:
        required: true
      docker-token:
        required: true
      sonarcloudorganization:
        required: true
      sonarcloudtoken:
        required: true
      sonarcloudprojectkey:
        required: true
      sonarhosturl:
        required: true 
      
            
      
      

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '${{ inputs.java-version }}'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: ${{ inputs.gradle-version }}
      - name: Check gradle version
        run: gradle --version
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew build
      - name: Copy Jar file
        run: mv build/libs/$(ls build/libs) app.jar
      - uses: actions/upload-artifact@master
        with:
          name: jar-file
          path: app.jar
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.sonar-token }}
        run: ./gradlew build sonar --info
  Sonar-scan:
    runs-on: ubuntu-latest
    steps:
      - name: SonarCloud Scan and push
        uses: SonarSource/sonarcloud-github-action@master
        with:
          sonarCloudOrganization: ${{ secrets.sonarcloudorganization }}
          sonarCloudToken: ${{ secrets.sonarcloudtoken }}
          sonarCloudProjectKey: ${{ secrets.sonarcloudprojectkey }}
          sonarHostUrl: ${{ secrets.sonarhosturl}}
  Docker-Build-Push:
    runs-on: ubuntu-latest
    steps:
      - name: Build and tag Docker image
        run: |
          docker build -t ${{ secrets.docker-username }}/${{ inputs.docker-repository-name }}:${{ inputs.docker-tag }} .
          echo "${{ secrets.docker-token }}" | docker login -u "${{ secrets.docker-username }}" --password-stdin
          docker push ${{ secrets.docker-username }}/${{ inputs.docker-repository-name }}:${{ inputs.docker-tag }}
